openapi: "3.0.0"

info:
  title: Layers Manager
  version: 1.0.0
  description: Layers Manager server

servers:
  - url: http://localhost:3000/api/v1
    description: Layers Manager dev endpoint
  # - url: http://layers-manager:3000/api/v1
  #   description: Layers Manager prod. endpoint

paths:
  # Layers
  /layers:
    post:
      summary: Insert a layer
      operationId: layers_post
      tags:
        - layers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponse'
        400:
          description: Bad Request
        500:
          description: Internal Error

    get:
      summary: Get a list of layers
      operationId: layers_get
      tags:
        - layers
      parameters:
        - in: query
          name: subset
          schema:
            type: string
            example: 5f1819229fdf8a0c7c2d8c36:9fdf8a0c7522c2d8c36f1819:29fdf8a05192c7c2d8c36f18
          description: A subset of layer ids, colon separated
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerCollectionResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /layers/{layerId}:
    put:
      summary: Update a layer by id
      operationId: layers_layer_id_put
      tags:
        - layers
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Layer Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get a layer by id
      operationId: layers_layer_id_get
      tags:
        - layers
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Layer Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a layer by id
      operationId: layers_layer_id_delete
      tags:
        - layers
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Layer Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /layers/query:
    post:
      summary: Query a subset of layers and their entities, by a timestamp and a bounding box
      operationId: layers_query_post
      tags:
        - layers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LayerQueryRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerQueryResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    # Entities
  /layers/{layerId}/entities:
    post:
      summary: Insert entities in a batch
      operationId: layers_layer_id_entities_post
      tags:
        - entities
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCollectionRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityCollectionResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /layers/{layerId}/entities/{entityId}:
    put:
      summary: Update an entity by id
      operationId: layers_layer_id_entities_entity_id_put
      tags:
        - entities
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: Entity's id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get an entity by id
      operationId: layers_layer_id_entities_entity_id_get
      tags:
        - entities
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: Entity's id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete an entity by id
      operationId: layers_layer_id_entities_entity_id_delete
      tags:
        - entities
      parameters:
        - in: path
          name: layerId
          schema:
            type: string
          required: true
          description: Layer's id
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: Entity's id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:

    # Layers
    LayerRequest:
      type: object
      properties:
        name:
          type: string
          description: Layer's name

    LayerResponse:
      allOf:
        - $ref: '#/components/schemas/LayerRequest'
        - type: object
          properties:
            id:
              type: string
              description: Layer's id
            createdAt:
              type: string
              format: date-time
              description: Timestamp of the last update, ISO-8601 formatted
            updatedAt:
              type: string
              format: date-time
              description: Timestamp of the last update, ISO-8601 formatted

    LayerCollectionResponse:
      type: array
      items:
        $ref: '#/components/schemas/LayerResponse'

    LayerQueryRequest:
      type: object
      required:
        - layers
      properties:
        layers:
          description: A subset of layer ids to query
          type: array
          minItems: 1
          items:
            type: string
        since:
          description: A timestamp, ISO-8601 formatted. If provided, entities updated since the timestamp will be fetched
          nullable: true
          type: string
          example: '2021-04-13T11:54:51.288+00:00'
        bbox:
          description: A geo bounding box. If provided, entities within the box will be fetched
          nullable: true
          $ref: '#/components/schemas/BoundingBox'

    LayerQueryResponse:
      type: array
      items:
        allOf:
          - $ref: '#/components/schemas/LayerResponse'
          - type: object
            properties:
              entities:
                description: A list of the layer's entities
                $ref: '#/components/schemas/EntityCollectionResponse'

    Error:
      type: object
      properties:
        message:
          type: string

    # Entities
    EntityRequest:
      type: object
      required:
        - name
        - layerId
        - type
      properties:
        externalId:
          type: string
          description: Entity's external id
        name:
          type: string
          description: Entity's name
        type:
          type: string
          description: Entity's type
        layerId:
          type: string
          description: The containing layer id
        geoData:
          description: A GeoJson data object
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/Feature'
            - $ref: '#/components/schemas/FeatureCollection'

    EntityResponse:
      allOf:
        - $ref: '#/components/schemas/EntityRequest'
        - type: object
          properties:
            id:
              type: string
              description: Entity's id
            createdAt:
              type: string
              format: date-time
              description: Timestamp of the last update, ISO-8601 formatted
            updatedAt:
              type: string
              format: date-time
              description: Timestamp of the last update, ISO-8601 formatted

    EntityCollectionRequest:
      type: array
      items:
        $ref: '#/components/schemas/EntityRequest'

    EntityCollectionResponse:
      type: array
      items:
        $ref: '#/components/schemas/EntityResponse'

    # GeoJson
    PointCoordinates:
      description: Coordinates of a single point
      type: array
      minItems: 2
      maxItems: 2
      items:
        type: number

    MultiPointCoordinates:
      description: An array of Point Coordinates
      type: array
      items:
        $ref: '#/components/schemas/PointCoordinates'

    LineStringCoordinates:
      description: An array of at least 2 Point Coordinates, required to draw a line
      type: array
      minItems: 2
      items:
        $ref: '#/components/schemas/PointCoordinates'

    LinearRingCoordinates:
      description: An array of Point Coordinaes required to draw a ring. At least 4 Point Coordinates are required, where the first and the last coordinates are identical
      type: array
      minItems: 4
      items:
        $ref: '#/components/schemas/PointCoordinates'

    PolygonCoordinates:
      description: An array of Linear Rings Coordinates, where the first ring describes the contour polygon and the following rings describes the inner polygons
      type: array
      minItems: 1
      items:
        $ref: '#/components/schemas/LinearRingCoordinates'

    MultiLineStringCoordinates:
      description: An array of LineString Coordinates
      type: array
      items:
        $ref: '#/components/schemas/LineStringCoordinates'

    MultiPolygonCoordinates:
      description: An array of Polygon Coordinates
      type: array
      items:
        $ref: '#/components/schemas/PolygonCoordinates'

    Point:
      description: GeoJson 'Point' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.2'
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/PointCoordinates'

    MultiPoint:
      description: GeoJson 'MultiPoint' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.3'
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        coordinates:
          $ref: '#/components/schemas/MultiPointCoordinates'

    LineString:
      description: GeoJson 'LineString' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          $ref: '#/components/schemas/LineStringCoordinates'

    MultiLineString:
      description: GeoJson 'MultiLineString' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.5'
      properties:
        type:
          type: string
          enum:
            - MultiLineString
        coordinates:
          $ref: '#/components/schemas/MultiLineStringCoordinates'

    Polygon:
      description: GeoJson 'Polygon' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.6'
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          $ref: '#/components/schemas/PolygonCoordinates'

    MultiPolygon:
      description: GeoJson 'MultiPolygon' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.7'
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          $ref: '#/components/schemas/MultiPolygonCoordinates'

    Feature:
      type: object
      description: GeoJson 'Feature' object
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.2'
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          nullable: true
          anyOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/LineString'
            - $ref: '#/components/schemas/Polygon'
            - $ref: '#/components/schemas/MultiPoint'
            - $ref: '#/components/schemas/MultiLineString'
            - $ref: '#/components/schemas/MultiPolygon'
        properties:
          nullable: true
          type: object

    FeatureCollection:
      description: GeoJson Feature Collection
      type: object
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'

    BoundingBox:
      description: 'An array of 4 floats, representing a bounding box. The array consists of the following points: [ [ bottom-left x ], [ bottom-left y ], [ upper-right x ], [ upper-right y ] ]'
      type: array
      nullable: true
      minItems: 4
      maxItems: 4
      items:
        type: number